#!/bin/bash

set -eu -o pipefail

release_dir="$( cd "$( dirname "$0" )" && cd ../.. && pwd )"
workspace_dir="$( cd "${release_dir}" && cd .. && pwd )"

# inputs
terraform_input_dir="$( cd "${workspace_dir}/terraform-src" && pwd )"

# outputs
output_dir="${workspace_dir}/build-artifacts"
mkdir -p "${output_dir}/terraform/"

tmp_gopath="$(mktemp -d /tmp/gopath-XXXXXX)"
trap "{ rm -rf "${tmp_gopath}" ; }" EXIT

terraform_dir="${tmp_gopath}/src/github.com/hashicorp/terraform"
mkdir -p "${terraform_dir}"
cp -R "${terraform_input_dir}/." "${terraform_dir}"

pushd "${terraform_dir}" > /dev/null
  GOPATH="${tmp_gopath}" PATH="${tmp_gopath}/bin:$PATH" XC_OS="linux" XC_ARCH="amd64" make bin
  cp ./pkg/linux_amd64/terraform* "${output_dir}/terraform/"
popd > /dev/null

pushd "${release_dir}" > /dev/null
  ./scripts/build "${output_dir}"
popd > /dev/null

if [[ -n $HTTP_PROXY ]]; then
    http_proxy=$HTTP_PROXY
fi
if [[ -n $HTTPS_PROXY ]]; then
    https_proxy=$HTTPS_PROXY
elif [[ -n $https_proxy ]]; then
    https_proxy=$http_proxy
fi
if [[ -n $NO_PROXY ]]; then
    no_proxy=$NO_PROXY
fi

cat << ---EOF > ${output_dir}/Dockerfile
FROM alpine:latest

$([[ -n $http_proxy ]] && echo "ENV http_proxy $http_proxy")
$([[ -n $https_proxy ]] && echo "ENV https_proxy $https_proxy")
$([[ -n $no_proxy ]] && echo "ENV no_proxy $no_proxy")

RUN apk update && \
    apk add ca-certificates git bash

COPY terraform/* /usr/local/bin/
COPY check in out /opt/resource/
---EOF

